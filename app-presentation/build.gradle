apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

// Some annotation processors (such as AutoFactory) rely on precise types in
// declaration signatures. By default, Kapt replaces every unknown type
// (including types for the generated classes) to NonExistentClass, but you
// can change this behavior. Add the additional flag to the build.gradle file
// to enable error type inferring in stubs:
kapt {
    correctErrorTypes = true
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId 'com.paperr'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode project.hasProperty('versionCode') ? project.property('versionCode').toInteger(): 999999
        versionName project.findProperty('versionName') ?: '99.99.99-dev'

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        }
    }

    lintOptions {
        disable 'MissingTranslation'
    }

    aaptOptions {
        noCompress "tflite"
    }

    // TODO: Use Google Play upload key to sign

    // How to sign the APK.
    signingConfigs {
        release {
            keyAlias project.findProperty('keyAlias') ?: System.getenv('SIGNING_KEY_ALIAS')
            keyPassword project.findProperty('keyPassword') ?: System.getenv('SIGNING_KEY_PASSWORD')
            storeFile new File(project.findProperty('storeFile') ?:
                    System.getenv('HOME') + '/Developer/my-keystore/paper.keystore')
            storePassword project.findProperty('storePassword') ?: System.getenv('SIGNING_KEY_STORE_PASSWORD')
        }
    }

    buildTypes {
        debug {
            // Configurable ProGuard testing, for example,
            // "./gradlew assembleDebug -PtestProguard=true"
            minifyEnabled project.hasProperty('testProguard')
            shrinkResources project.hasProperty('testProguard')
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // Enable the signing
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Google Support Library.
    implementation rootProject.ext.dep.supportAppcompatV7
    implementation rootProject.ext.dep.supportVectorDrawable
    implementation rootProject.ext.dep.supportRecyclerViewV7
    implementation rootProject.ext.dep.supportConstraintLayout
    implementation rootProject.ext.dep.supportCardViewV7
    implementation rootProject.ext.dep.supportDesign
    // Transition
    implementation rootProject.ext.dep.supportTransition
    // Multi-dex.
    implementation rootProject.ext.dep.supportMultidex
    // Arch component
    implementation rootProject.ext.dep.androidArcViewModel
    implementation rootProject.ext.dep.androidArcLiveData
    implementation rootProject.ext.dep.androidArchWork
    // Firebase JobDispatcher support
    implementation rootProject.ext.dep.androidArchWorkFirebaseJob

    // Firebase
    implementation rootProject.ext.dep.firebaseCore
    implementation rootProject.ext.dep.firebaseMlVision
    implementation rootProject.ext.dep.firebaseMLCustomModel

    // Dependency Injection.
    implementation rootProject.ext.dep.dagger2
//    implementation rootProject.ext.dep.dagger2Support
    kapt rootProject.ext.dep.dagger2Compiler

    // JSON.
    implementation rootProject.ext.dep.gson

    // ADs mediator
    implementation rootProject.ext.dep.playServicesAds
    implementation rootProject.ext.dep.facebookAudienceNetwork

    // Image loader.
    implementation rootProject.ext.dep.glide
    kapt rootProject.ext.dep.glideAnnotation
    implementation rootProject.ext.dep.fresco

    // IO, Cache
    implementation rootProject.ext.dep.diskLruCache

    // RecyclerView.
    implementation rootProject.ext.dep.airbnbEpoxy
    implementation rootProject.ext.dep.discreteScrollView

    // RxKotlin.
    implementation rootProject.ext.dep.rxKotlin
    // Rx-Java.
    implementation rootProject.ext.dep.rxJava
    implementation rootProject.ext.dep.rxAndroid
    // Rx-Binding.
    implementation rootProject.ext.dep.rxBinding
    // Rx-Permissions.
    implementation rootProject.ext.dep.rxPermissions

    // My Libraries.
    implementation rootProject.ext.dep.collageGestureDetector
    implementation rootProject.ext.dep.collageGestureDetectorRx
    implementation project(path: ':app-domain')

    // Unit tests.
    testImplementation rootProject.ext.dep.testJunit
    testImplementation rootProject.ext.dep.testMockito

    // Instrumentation tests.
    androidTestImplementation rootProject.ext.dep.testEspressoCore
}

apply plugin: 'com.google.gms.google-services'
