apply plugin: "com.android.model.library"

// Gradle doc:
// http://google.github.io/android-gradle-dsl/
model {
    android {
        compileSdkVersion 25
        buildToolsVersion "25.0.3"

        defaultConfig.with {
            minSdkVersion.apiLevel = 16
            targetSdkVersion.apiLevel = 25
        }

        compileOptions.with {
            sourceCompatibility = JavaVersion.VERSION_1_7
            targetCompatibility = JavaVersion.VERSION_1_7
        }

        def CPP_SOURCES = "src/main/jni/cpp"

        ndk {
            platformVersion = 16
            // The name of the native library recognized by JNI.
            moduleName "photo-collage"
            // The compiler options, including the the root path and common
            // header files path.
            cppFlags.addAll(["-frtti",
                             "-fexceptions",
                             "-DUSE_PROTOBUF=1",
                             "-DHAVE_PTHREAD=1",
                             "-I" + file("${CPP_SOURCES}").absolutePath,
                             "-I" + file("${CPP_SOURCES}/include").absolutePath,
                             "-I" + file("${CPP_SOURCES}/third_party").absolutePath])
            // Support JNI to print message through __android_log_print method.
            ldLibs.addAll(["log", "android"])
            // Determine what STL library being linked to.
            stl = "gnustl_static"
            // ABI
            abiFilters.addAll([
                    "armeabi",
                    "armeabi-v7a"
            ])
        }

        sources {
            main {
                jni {
                    source {
                        // Exclude CMake, Makefile and unit-tests files.
                        exclude "**/*CMake*"
                        exclude "**/Catch.hpp"
                        exclude "**/*Test*"
                        exclude "**/tests"
                    }
                }
                jniLibs {
                    source {
                        srcDirs "src/main/jniLibs"
                    }
                }
            }
        }

        buildTypes {
            release {
                debuggable false
                minifyEnabled false
                proguardFiles.add(file("proguard-rules.pro"))
            }
        }
    }
}

dependencies {
    compile fileTree(dir: "libs", include: ["*.jar"])
}

// Copy tasks.
task copyAAR(type: Copy) {
    from("build/outputs/aar")
    into("../dist")
}

// The end of the build process.
assemble.finalizedBy(copyAAR)
