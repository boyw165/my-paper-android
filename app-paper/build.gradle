apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
// Enable realm.
apply plugin: 'realm-android'

// Prepare the keystore for signing the APK.
def keystorePropertiesFile = rootProject.file("../my-google-play-certs/bigbite-keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.paper"
        minSdkVersion 16
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    lintOptions {
        disable "MissingTranslation"
    }

    // How to sign the APK.
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile rootProject.file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    productFlavors {
        dev {
            // Enable pre-dexing to produce an APK that can be tested on
            // Android 5.0+ without the time-consuming DEX build processes.
            minSdkVersion 21
        }
        prod {
            // The actual minSdkVersion for the production version.
            minSdkVersion 16
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // Enable the sign process.
            signingConfig signingConfigs.release
        }
    }
}

repositories {
    maven { url "https://maven.fabric.io/public" }
    // Support AAR file.
    flatDir { dirs "libs" }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Google Support Library.
    compile rootProject.ext.dep.supportAppcompatV7
    compile rootProject.ext.dep.supportVectorDrawable
    compile rootProject.ext.dep.supportRecyclerViewV7
    compile rootProject.ext.dep.supportConstraintLayout
    // Multi-dex.
    compile rootProject.ext.dep.supportMultidex

    // Dependency Injection.
    compile rootProject.ext.dep.dagger2
//    compile rootProject.ext.dep.dagger2Support
    annotationProcessor rootProject.ext.dep.dagger2Compiler

    // JSON.
    compile rootProject.ext.dep.gson

    // View Binding.
    compile rootProject.ext.dep.butterKnife
    annotationProcessor rootProject.ext.dep.butterKnifeCompiler

    // Image loader.
    compile rootProject.ext.dep.glide

    // View.
    compile rootProject.ext.dep.airbnbEpoxy

    // Leak Detection.
    compile rootProject.ext.dep.leakcanary
    releaseCompile rootProject.ext.dep.leakcanaryNoOp

    // My Libraries.
    compile project(path: ":lib-core")
    compile project(path: ":lib-common-theme")
    compile project(path: ":lib-reactive")
    compile project(path: ":lib-shared-model")
    compile project(path: ":lib-shared-model-repository")
    compile project(path: ":lib-doodle-editor")
    compile project(path: ':lib-widget')

    // Unit tests.
    testCompile rootProject.ext.dep.testJunit
    testCompile rootProject.ext.dep.testMockito
    testCompile rootProject.ext.dep.leakcanaryNoOp

    // Instrumentation tests.
    androidTestCompile(rootProject.ext.dep.testEspressoCore, {
        exclude group: "com.android.support", module: "support-annotations"
    })
}
